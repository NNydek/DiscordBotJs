"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IBot = void 0;
const discord_command_parser_1 = require("discord-command-parser");
const discord_js_1 = require("discord.js");
const console_reader_1 = require("../console-reader");
const helpers_1 = require("../helpers");
const iteration_1 = require("../iteration");
const logger_1 = require("../logger");
process.on('unhandledRejection', error => this.log.error('Uncaught Promise Rejection', error));
class IBot {
    constructor(config, defaults) {
        this.config = iteration_1.fuse(iteration_1.clone(defaults), config);
        this.logger = logger_1.generateLogger(helpers_1.projectDir(this.config.directory.logs));
        this.commands = new helpers_1.CommandMap();
        this.console = new console_reader_1.ConsoleReader(this.logger);
        this.console.commands
            .on('exit', (args, rl) => {
            if (this.client)
                this.client.destroy();
            rl.close();
        });
        this.client = new discord_js_1.Client()
            .on('ready', () => {
            this.logger.debug('Bot Online');
            this.online = true;
            this.onReady(this.client);
            if (!!this.plugins) {
                this.plugins.forEach(plugin => plugin.onReady(this.client));
            }
        })
            .on('disconnect', () => {
            this.online = false;
            this.logger.debug('Bot Disconnected');
        })
            .on('error', (error) => {
            this.logger.error(error);
            console.log(error);
        })
            .on('message', (msg) => {
            this.preMessage(msg);
            let parsed = discord_command_parser_1.parse(msg, this.config.command.symbol);
            if (!parsed.success)
                return;
            this.parsedMessage(parsed);
            let handlers = this.commands.get(parsed.command);
            if (handlers) {
                this.logger.debug(`Bot Command: ${msg.content}`);
                handlers.forEach(handle => {
                    handle(parsed, msg);
                });
            }
            this.postMessage(msg);
        });
        this.onClientCreated(this.client);
        this.onRegisterConsoleCommands(this.console.commands);
        this.onRegisterDiscordCommands(this.commands);
        let files = helpers_1.readDir(this.config.directory.plugins);
        if (!!files) {
            this.plugins = files
                .filter(file => !file.endsWith('.map'))
                .map(file => helpers_1.requireFile(this.config.directory.plugins, file).default)
                .map(construct => new construct());
            this.plugins.forEach(plugin => {
                plugin.preInitialize(this);
                plugin.clientBound(this.client);
                plugin.registerConsoleCommands(this.console.commands);
                plugin.registerDiscordCommands(this.commands);
                plugin.postInitialize(this);
            });
        }
    }
    preMessage(msg) { }
    parsedMessage(msg) { }
    postMessage(msg) { }
    connect() {
        return this.client.login(this.config.discord.token);
    }
    listen() {
        return this.console.listen();
    }
}
exports.IBot = IBot;
