/// <reference types="node" />
import { SuccessfulParsedMessage } from 'discord-command-parser';
import { Client, Message } from 'discord.js';
import { ParsedArgs } from 'minimist';
import { Interface } from 'readline';
import { Logger } from 'winston';
import { IBotConfig, IBotPlugin } from '../models';
import { ConsoleReader } from '../console-reader';
import { CommandMap } from '../helpers';
export declare abstract class IBot<T extends IBotConfig> {
    online: boolean;
    readonly config: T;
    readonly logger: Logger;
    readonly client: Client;
    readonly commands: CommandMap<(cmd: SuccessfulParsedMessage<Message>, msg: Message) => void>;
    readonly console: ConsoleReader;
    readonly plugins: IBotPlugin[];
    constructor(config: T, defaults: T);
    abstract onRegisterConsoleCommands(map: CommandMap<(args: ParsedArgs, rl: Interface) => void>): void;
    abstract onRegisterDiscordCommands(map: CommandMap<(cmd: SuccessfulParsedMessage<Message>, msg: Message) => void>): void;
    abstract onClientCreated(client: Client): void;
    abstract onReady(client: Client): void;
    preMessage(msg: Message): void;
    parsedMessage(msg: SuccessfulParsedMessage<Message>): void;
    postMessage(msg: Message): void;
    connect(): Promise<string>;
    listen(): void;
}
