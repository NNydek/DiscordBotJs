import { IterationEvent, MapIterationEvent, MatchIterationEvent } from './events';
import { SortOptions } from './config';
export declare class Flow {
    source: any;
    constructor(source: any);
    static from<T>(source: T): Flow;
    all(handler: (value: any, key: string | number, event: IterationEvent) => boolean, event?: IterationEvent): boolean;
    any(handler: (value: any, key: string | number, event: IterationEvent) => boolean, event?: IterationEvent): boolean;
    clone(): this;
    copy(): this;
    distinct(handler: (value: any, key: string | number, event: IterationEvent) => any, event?: IterationEvent): this;
    each(handler: (value: any, key: string | number, event: IterationEvent) => void, event?: IterationEvent): this;
    filter(handler: (value: any, key: string | number, event: IterationEvent) => boolean, event?: IterationEvent): this;
    first(): any;
    fuse(source: any, event?: IterationEvent): this;
    group<K>(handler: (value: any, key: string | number, event: IterationEvent) => K, event?: IterationEvent): this;
    last(): any;
    map(handler: (value: any, key: string | number, event: MapIterationEvent) => any, event?: MapIterationEvent): this;
    match(source: any, event?: MatchIterationEvent): boolean;
    remove(object: any): this;
    removeAt(key: string | number): any;
    sort(options: Array<SortOptions>): this;
    toArray<V>(): Array<V>;
    toMap<K, V>(key: (value: any, key: string | number) => K, value: (value: any, key: string | number) => V): Map<K, V>;
}
