"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteFile = exports.fileExists = exports.appendFile = exports.writeJson = exports.writeFile = exports.readDir = exports.readFile = exports.requireFile = exports.readJson = exports.projectDir = exports.ensureDirectory = exports.directory = void 0;
const path = require("path");
const fs = require("fs");
const jsonfile_1 = require("jsonfile");
exports.directory = path.resolve(path.dirname(require.main.filename));
exports.ensureDirectory = (dirPath) => __awaiter(void 0, void 0, void 0, function* () {
    yield fs.promises.mkdir(dirPath, { recursive: true });
});
exports.projectDir = (...args) => {
    if (args.some(x => x.startsWith('./') || x.startsWith('../'))) {
        return path.resolve(exports.directory, ...args);
    }
    return path.resolve(...args);
};
exports.readJson = (...args) => {
    return jsonfile_1.readFileSync(exports.projectDir(...args), { encoding: 'utf8' });
};
exports.requireFile = (...args) => {
    return require(exports.projectDir(...args));
};
exports.readFile = (...args) => {
    return fs.readFileSync(exports.projectDir(...args), { encoding: 'utf8' });
};
exports.readDir = (...args) => {
    if (!exports.fileExists(...args)) {
        return [];
    }
    return fs.readdirSync(exports.projectDir(...args));
};
exports.writeFile = (data, ...args) => __awaiter(void 0, void 0, void 0, function* () {
    const target = exports.projectDir(...args);
    yield exports.ensureDirectory(path.dirname(target));
    return fs.writeFileSync(target, data, { encoding: 'utf8' });
});
exports.writeJson = (data, ...args) => __awaiter(void 0, void 0, void 0, function* () {
    const target = exports.projectDir(...args);
    yield exports.ensureDirectory(path.dirname(target));
    return jsonfile_1.writeFileSync(target, data, { encoding: 'utf8' });
});
exports.appendFile = (data, ...args) => __awaiter(void 0, void 0, void 0, function* () {
    const target = exports.projectDir(...args);
    yield exports.ensureDirectory(path.dirname(target));
    return fs.appendFileSync(target, data, { encoding: 'utf8' });
});
exports.fileExists = (...args) => {
    return fs.existsSync(exports.projectDir(...args));
};
exports.deleteFile = (...args) => {
    let filepath = exports.projectDir(...args);
    if (!fs.existsSync(filepath))
        return;
    return fs.unlinkSync(filepath);
};
